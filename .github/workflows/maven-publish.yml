name: Publish Artifacts

on:
  release:
    types: [created]
  push:
    branches:
      - release-*

jobs:
  metadata:
    name: "Calculate Metadata"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Capture branch info
        if: contains(github.ref, 'refs/heads/')
        run: |
          echo "release_version=${{ github.event.release.tag_name }}-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Capture branch info
        if: "!contains(github.ref, 'refs/heads/')"
        run: |
          echo "release_version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT


    outputs:
      release_version: ${{ steps.metadata.outputs.release_version }}

  test:
    name: "Run Unit Tests"
    runs-on: ubuntu-latest
    needs: [metadata]
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven Repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${{ needs.metadata.outputs.release_version }}

      - name: Test with Maven
        run: mvn -B test

  build:
    name: "Build Java Executable"
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven Repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${{ needs.metadata.outputs.release_version }}

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: 'Upload Executable JAR to Artifact Cache'
        uses: actions/upload-artifact@v4
        with:
          name: taverna-cmd-${{ needs.metadata.outputs.release_version }}-executable.jar
          path: taverna-cmd/target/taverna-cmd-${{ needs.metadata.outputs.release_version }}-executable.jar
          retention-days: 1

  build_native:
    name: "Build Native Executable Command"
    # build on all target os
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            native-asset-suffix: linux-amd64
            target-suffix: ""
          - os: windows-latest
            native-asset-suffix: windows-amd64.exe
            target-suffix: .exe
          - os: macos-latest
            native-asset-suffix: macos
            target-suffix: ""

    permissions:
      contents: read
      packages: write

    steps:
      # install GraalVM (mandrel) for native build
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'mandrel'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # windows: install msbuild tools for native compile
      - name: Add msbuild to PATH
        if: contains(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.2

      # windows: ensure that dev tools are added to path
      - name: Add toolkit to path
        if: contains(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      # ubuntu: install packages needed for graalvm native compile
      - name: Install additional packages
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get install -y zlib1g-dev

      - uses: actions/checkout@v4

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${{ needs.metadata.outputs.release_version }}

      - name: Build with Maven
        run: |
          mvn -B --update-snapshots -Dbuild=cli -DskipTests -Drevision="${{ needs.metadata.outputs.release_version }}" -Dnative package
          mv taverna-cmd/target/taverna-cmd${{ matrix.target-suffix }} taverna-cmd/target/taverna-cmd-${{ needs.metadata.outputs.release_version }}-${{ matrix.native-asset-suffix }}

      - name: 'Upload Binary Executable'
        uses: actions/upload-artifact@v4
        with:
          name: taverna-cmd-${{ needs.metadata.outputs.release_version }}-${{ matrix.native-asset-suffix }}
          path: taverna-cmd/target/taverna-cmd-${{ needs.metadata.outputs.release_version }}-${{ matrix.native-asset-suffix }}
          retention-days: 1

  build_native_operator:
    name: "Build Native Operator"
    # build on all target os
    runs-on: ubuntu-latest
    needs: [test]

    permissions:
      contents: read
      packages: write

    steps:
      # install GraalVM (mandrel) for native build
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'mandrel'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # windows: install msbuild tools for native compile
      - name: Add msbuild to PATH
        if: contains(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.2

      # ubuntu: install packages needed for graalvm native compile
      - name: Install additional packages
        run: sudo apt-get install -y zlib1g-dev

      - uses: actions/checkout@v4

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${{ needs.metadata.outputs.release_version }}

      - name: Build with Maven
        run: |
          mvn -B --update-snapshots -Dbuild=operator -DskipTests -Drevision="${{ github.event.release.tag_name }}" -DquarkusNative package

  update_release:
    name: "Add Artifacts to Github Release"
    if: "!contains(needs.metadata.outputs.release_version, '-SNAPSHOT')"
    runs-on: ubuntu-latest

    needs: [build, build_native]

    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4

      - name: 'Download Artifacts from Cache'
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate checksums
        uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            artifacts/*/*

      - name: "Generate Attestation for Artifacts"
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            "artifacts/*/taverna*"
            checksum.txt

      - name: "Upload Artifact to Release"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            checksum.txt
            ${{ steps.attestation.outputs.bundle-path }}

  container_image:
    name: "Build and Publish Container Image"
    runs-on: ubuntu-latest
    needs: [build_native]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    outputs:
      image_digest: ${{ steps.push.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Download Artifact from Cache'
        uses: actions/download-artifact@v4
        with:
          name: taverna-cmd-${{ github.event.release.tag_name }}-linux-amd64
          path: taverna-cmd/target/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: taverna-cmd
          file: taverna-cmd/src/main/container/Dockerfile
          push: true
          tags: docker.io/chrisruffalo/taverna:${{ github.event.release.tag_name }}
          build-args: INPUT_BINARY=taverna-cmd-${{ github.event.release.tag_name }}-linux-amd64

      - name: Attest Docker Image
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: docker.io/chrisruffalo/taverna
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true


  release_to_central:
    name: "Release to Maven Central"
    runs-on: ubuntu-latest
    # waits for all builds to complete so artifacts are all verified before trying to release
    needs: [test, build, build_native]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install GPG Secret Key
        run: |
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Set release version
        run: mvn -B versions:set -DnewVersion=${{ needs.metadata.outputs.release_version }}

      - name: Publish to Maven Central
        run: mvn -B -DpreparePublish -DpublishCentral -DskipTests clean deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSS_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  update_release_with_links:
    name: "Update/Finalize Release"
    runs-on: ubuntu-latest
    needs: [release_to_central,update_release,container_image]
    if: "!contains(needs.metadata.outputs.release_version, '-SNAPSHOT')"
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: "Add Maven URLs to Release"
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ##Maven Artifacts:
              |module|url|
              |------|---|
              |taverna|https://central.sonatype.com/artifact/io.github.chrisruffalo/taverna/${{ github.event.release.tag_name }}/overview|
              |taverna cmd|https://central.sonatype.com/artifact/io.github.chrisruffalo/taverna-cmd/${{ github.event.release.tag_name }}/overview|
              |taverna maven plugin|https://central.sonatype.com/artifact/io.github.chrisruffalo/taverna-maven-plugin/${{ github.event.release.tag_name }}/overview|
          append_body: true

      - name: "Add Docker URL to Release"
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ##Docker Image
            https://hub.docker.com/layers/chrisruffalo/taverna/${{ github.event.release.tag_name }}/images/${{ needs.container_image.outputs.image_digest }}
          append_body: true