name: Package Binaries

on:
  release:
    types: [created]

jobs:
  test:
    name: "Run Unit Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven Repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ github.event.release.tag_name }}

      - name: Test with Maven
        run: mvn -B -Drevision=${{ github.event.release.tag_name }} test

  build:
    name: "Build Java Executable"
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache local Maven Repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ github.event.release.tag_name }}

      - name: Build with Maven
        run: mvn -B -Drevision=${{ github.event.release.tag_name }} -DskipTests package

      - name: 'Upload Executable JAR to Artifact Cache'
        uses: actions/upload-artifact@v4
        with:
          name: taverna-${{ github.event.release.tag_name }}-executable.jar
          path: target/taverna-${{ github.event.release.tag_name }}-executable.jar
          retention-days: 1

  build_native:
    name: "Build Native Executable"
    # build on all target os
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            native-asset-suffix: linux-amd64
            target-suffix: ""
          - os: windows-latest
            native-asset-suffix: windows-amd64.exe
            target-suffix: .exe
          - os: macos-latest
            native-asset-suffix: macos
            target-suffix: ""

    permissions:
      contents: read
      packages: write

    steps:
      # install GraalVM (mandrel) for native build
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'mandrel'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # windows: install msbuild tools for native compile
      - name: Add msbuild to PATH
        if: contains(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.0.2

      # windows: ensure that dev tools are added to path
      - name: Add toolkit to path
        if: contains(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      # ubuntu: install packages needed for graalvm native compile
      - name: Install additional packages
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get install -y zlib1g-dev

      - uses: actions/checkout@v4

      - name: Set version
        run: mvn -B versions:set -DnewVersion="${{ github.event.release.tag_name }}"

      - name: Build with Maven
        run: |
          mvn -B --update-snapshots -DskipTests -Drevision="${{ github.event.release.tag_name }}" -Pnative package
          mv target/taverna${{ matrix.target-suffix }} target/taverna-${{ github.event.release.tag_name }}-${{ matrix.native-asset-suffix }}

      - name: 'Upload Binary Executable'
        uses: actions/upload-artifact@v4
        with:
          name: taverna-${{ github.event.release.tag_name }}-${{ matrix.native-asset-suffix }}
          path: target/taverna-${{ github.event.release.tag_name }}-${{ matrix.native-asset-suffix }}
          retention-days: 1

  update_release:
    name: "Add Artifacts to Github Release"
    runs-on: ubuntu-latest

    needs: [build, build_native]

    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4

      - name: 'Download Artifacts from Cache'
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: "Generate Attestation for Artifacts"
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "artifacts/*/taverna*"

      - name: Generate checksums
        uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            artifacts/*/*

      - name: "Upload Artifact to Release"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/*
            checksum.txt
            ${{ steps.attestation.outputs.bundle-path }}

  conatiner_image:
    name: "Build and Publish Container Image"
    runs-on: ubuntu-latest
    needs: [build_native]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: 'Download Artifact from Cache'
        uses: actions/download-artifact@v4
        with:
          name: taverna-${{ github.event.release.tag_name }}-linux-amd64
          path: target/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/main/container/Dockerfile
          push: true
          tags: docker.io/chrisruffalo/taverna:${{ github.event.release.tag_name }}
          build-args: INPUT_BINARY=taverna-${{ github.event.release.tag_name }}-linux-amd64

      - name: Attest Docker Image
        uses: actions/attest-build-provenance@v2
        id: attest
        with:
          subject-name: docker.io/chrisruffalo/taverna
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

#  central_push:
#    name: "Release to Maven Central"
#    runs-on: ubuntu-latest
#    needs: [build, build_native]
#    permissions:
#      contents: write
#      packages: write
#    steps:
#      - name: Install GPG Secret Key
#        run: |
#          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import
#          gpg --list-secret-keys --keyid-format LONG